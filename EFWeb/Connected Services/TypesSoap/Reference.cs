//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EFWeb.TypesSoap {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TypesContract", Namespace="http://schemas.datacontract.org/2004/07/EFWCF.Contracts")]
    [System.SerializableAttribute()]
    public partial class TypesContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TypesSoap.ITypes")]
    public interface ITypes {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITypes/GetCities", ReplyAction="http://tempuri.org/ITypes/GetCitiesResponse")]
        EFCommon.ResponseBase<System.Collections.Generic.List<EFWeb.TypesSoap.TypesContract>> GetCities(long departmentId, long countryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITypes/GetCities", ReplyAction="http://tempuri.org/ITypes/GetCitiesResponse")]
        System.Threading.Tasks.Task<EFCommon.ResponseBase<System.Collections.Generic.List<EFWeb.TypesSoap.TypesContract>>> GetCitiesAsync(long departmentId, long countryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITypes/GetDepartments", ReplyAction="http://tempuri.org/ITypes/GetDepartmentsResponse")]
        EFCommon.ResponseBase<System.Collections.Generic.List<EFWeb.TypesSoap.TypesContract>> GetDepartments(long countryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITypes/GetDepartments", ReplyAction="http://tempuri.org/ITypes/GetDepartmentsResponse")]
        System.Threading.Tasks.Task<EFCommon.ResponseBase<System.Collections.Generic.List<EFWeb.TypesSoap.TypesContract>>> GetDepartmentsAsync(long countryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITypes/GetCountries", ReplyAction="http://tempuri.org/ITypes/GetCountriesResponse")]
        EFCommon.ResponseBase<System.Collections.Generic.List<EFWeb.TypesSoap.TypesContract>> GetCountries();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITypes/GetCountries", ReplyAction="http://tempuri.org/ITypes/GetCountriesResponse")]
        System.Threading.Tasks.Task<EFCommon.ResponseBase<System.Collections.Generic.List<EFWeb.TypesSoap.TypesContract>>> GetCountriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITypes/GetDocumentTypes", ReplyAction="http://tempuri.org/ITypes/GetDocumentTypesResponse")]
        EFCommon.ResponseBase<System.Collections.Generic.List<EFWeb.TypesSoap.TypesContract>> GetDocumentTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITypes/GetDocumentTypes", ReplyAction="http://tempuri.org/ITypes/GetDocumentTypesResponse")]
        System.Threading.Tasks.Task<EFCommon.ResponseBase<System.Collections.Generic.List<EFWeb.TypesSoap.TypesContract>>> GetDocumentTypesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITypesChannel : EFWeb.TypesSoap.ITypes, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TypesClient : System.ServiceModel.ClientBase<EFWeb.TypesSoap.ITypes>, EFWeb.TypesSoap.ITypes {
        
        public TypesClient() {
        }
        
        public TypesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TypesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TypesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TypesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public EFCommon.ResponseBase<System.Collections.Generic.List<EFWeb.TypesSoap.TypesContract>> GetCities(long departmentId, long countryId) {
            return base.Channel.GetCities(departmentId, countryId);
        }
        
        public System.Threading.Tasks.Task<EFCommon.ResponseBase<System.Collections.Generic.List<EFWeb.TypesSoap.TypesContract>>> GetCitiesAsync(long departmentId, long countryId) {
            return base.Channel.GetCitiesAsync(departmentId, countryId);
        }
        
        public EFCommon.ResponseBase<System.Collections.Generic.List<EFWeb.TypesSoap.TypesContract>> GetDepartments(long countryId) {
            return base.Channel.GetDepartments(countryId);
        }
        
        public System.Threading.Tasks.Task<EFCommon.ResponseBase<System.Collections.Generic.List<EFWeb.TypesSoap.TypesContract>>> GetDepartmentsAsync(long countryId) {
            return base.Channel.GetDepartmentsAsync(countryId);
        }
        
        public EFCommon.ResponseBase<System.Collections.Generic.List<EFWeb.TypesSoap.TypesContract>> GetCountries() {
            return base.Channel.GetCountries();
        }
        
        public System.Threading.Tasks.Task<EFCommon.ResponseBase<System.Collections.Generic.List<EFWeb.TypesSoap.TypesContract>>> GetCountriesAsync() {
            return base.Channel.GetCountriesAsync();
        }
        
        public EFCommon.ResponseBase<System.Collections.Generic.List<EFWeb.TypesSoap.TypesContract>> GetDocumentTypes() {
            return base.Channel.GetDocumentTypes();
        }
        
        public System.Threading.Tasks.Task<EFCommon.ResponseBase<System.Collections.Generic.List<EFWeb.TypesSoap.TypesContract>>> GetDocumentTypesAsync() {
            return base.Channel.GetDocumentTypesAsync();
        }
    }
}
