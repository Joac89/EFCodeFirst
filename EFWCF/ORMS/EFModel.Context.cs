//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EFWCF.ORMS
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class EF_DataBaseEntities : DbContext
    {
        public EF_DataBaseEntities()
            : base("name=EF_DataBaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int USP_CUSTOMER_CREATE(string name, string address, Nullable<System.DateTime> birthdate, string documentid, Nullable<int> documenttypeid, Nullable<long> cityid, ObjectParameter id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("birthdate", birthdate) :
                new ObjectParameter("birthdate", typeof(System.DateTime));
    
            var documentidParameter = documentid != null ?
                new ObjectParameter("documentid", documentid) :
                new ObjectParameter("documentid", typeof(string));
    
            var documenttypeidParameter = documenttypeid.HasValue ?
                new ObjectParameter("documenttypeid", documenttypeid) :
                new ObjectParameter("documenttypeid", typeof(int));
    
            var cityidParameter = cityid.HasValue ?
                new ObjectParameter("cityid", cityid) :
                new ObjectParameter("cityid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_CUSTOMER_CREATE", nameParameter, addressParameter, birthdateParameter, documentidParameter, documenttypeidParameter, cityidParameter, id);
        }
    
        public virtual int USP_CUSTOMER_DELETE(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_CUSTOMER_DELETE", idParameter);
        }
    
        public virtual ObjectResult<USP_CUSTOMER_READ_Result> USP_CUSTOMER_READ(Nullable<long> id, string name)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_CUSTOMER_READ_Result>("USP_CUSTOMER_READ", idParameter, nameParameter);
        }
    
        public virtual int USP_CUSTOMER_UPDATE(Nullable<long> id, string name, string address, Nullable<System.DateTime> birthdate, string documentid, Nullable<int> documenttypeid, Nullable<long> cityid)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("birthdate", birthdate) :
                new ObjectParameter("birthdate", typeof(System.DateTime));
    
            var documentidParameter = documentid != null ?
                new ObjectParameter("documentid", documentid) :
                new ObjectParameter("documentid", typeof(string));
    
            var documenttypeidParameter = documenttypeid.HasValue ?
                new ObjectParameter("documenttypeid", documenttypeid) :
                new ObjectParameter("documenttypeid", typeof(int));
    
            var cityidParameter = cityid.HasValue ?
                new ObjectParameter("cityid", cityid) :
                new ObjectParameter("cityid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_CUSTOMER_UPDATE", idParameter, nameParameter, addressParameter, birthdateParameter, documentidParameter, documenttypeidParameter, cityidParameter);
        }
    
        public virtual ObjectResult<USP_GET_CITY_Result> USP_GET_CITY(Nullable<long> departmentid, Nullable<long> countryid)
        {
            var departmentidParameter = departmentid.HasValue ?
                new ObjectParameter("departmentid", departmentid) :
                new ObjectParameter("departmentid", typeof(long));
    
            var countryidParameter = countryid.HasValue ?
                new ObjectParameter("countryid", countryid) :
                new ObjectParameter("countryid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GET_CITY_Result>("USP_GET_CITY", departmentidParameter, countryidParameter);
        }
    
        public virtual ObjectResult<USP_GET_COUNTRY_Result> USP_GET_COUNTRY()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GET_COUNTRY_Result>("USP_GET_COUNTRY");
        }
    
        public virtual ObjectResult<USP_GET_DEPARTMENT_Result> USP_GET_DEPARTMENT(Nullable<long> countryid)
        {
            var countryidParameter = countryid.HasValue ?
                new ObjectParameter("countryid", countryid) :
                new ObjectParameter("countryid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GET_DEPARTMENT_Result>("USP_GET_DEPARTMENT", countryidParameter);
        }
    
        public virtual ObjectResult<USP_GET_DOCUMENT_TYPES_Result> USP_GET_DOCUMENT_TYPES()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GET_DOCUMENT_TYPES_Result>("USP_GET_DOCUMENT_TYPES");
        }
    }
}
